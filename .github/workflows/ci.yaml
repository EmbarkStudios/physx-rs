on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: CI
env:
  ANDROID_NDK_ROOT: /usr/local/lib/android/sdk/ndk-bundle
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # make sure all code has been formatted with rustfmt
      - run: rustup component add rustfmt
      - run: cargo fmt -- --check --color always

      # run clippy to verify we have no warnings
      - run: rustup component add clippy
      - run: cargo clippy --all-features --all-targets -- -D warnings

  cargo-deny:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

  test_debug:
    name: Test (Debug)
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-latest]
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo fetch
      - name: test - no features
        run: cargo test
      - name: test - cmake + structgen
        run: cargo test --all-features
      - name: ball cmake + structgen
        run: cargo run --example ball --all-features
      - name: ball no features
        run: cargo run --example ball
      - name: ball just cmake
        run: cargo run --manifest-path physx/Cargo.toml --example ball_physx --features use-cmake
      - name: ball just structgen
        run: cargo run --manifest-path physx/Cargo.toml --example ball_physx --features structgen

  test_release:
    name: Test (Release)
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-latest]
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo fetch
      - name: test - no features
        run: cargo test --release
      - name: test - cmake + structgen
        run: cargo test --all-features --release
      - name: ball cmake + structgen
        run: cargo run --example ball --all-features --release
      - name: ball no features
        run: cargo run --example ball --release
      - name: ball just cmake
        run: cargo run --manifest-path physx/Cargo.toml --example ball_physx --features use-cmake --release
      - name: ball just structgen
        run: cargo run --manifest-path physx/Cargo.toml --example ball_physx --features structgen --release

  package:
    name: Package
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-latest]
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo package --manifest-path ./physx-sys/Cargo.toml

  structgen:
    name: Structgen
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-latest]
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo build --manifest-path ./physx-sys/Cargo.toml --features structgen
      - name: Upload
        shell: bash
        run: |
          # Copy the structgen output to a deterministic location
          rs=$(find target/ -name structgen_out.rs)
          hpp=$(find target/ -name structgen_out.hpp)

          mkdir ./structgen
          cp $rs ./structgen/structgen.rs
          cp $hpp ./structgen/structgen_out.hpp
      - uses: actions/upload-artifact@v1
        with:
          name: structgen-${{ matrix.os }}
          path: structgen

  build_android_debug:
    name: Build (Debug) (aarch64-linux-android)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup target add aarch64-linux-android
      - run: cargo fetch
      - name: build - no features
        env:
          LD_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ld
          CC_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang
          CXX_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++
          AR_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar
        run: cargo build --target aarch64-linux-android

  build_android_release:
    name: Build (Release) (aarch64-linux-android)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup target add aarch64-linux-android
      - run: cargo fetch
      - name: build - no features
        env:
          LD_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ld
          CC_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang
          CXX_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang++
          AR_aarch64_linux_android: ${{env.ANDROID_NDK_ROOT }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar
        run: cargo build --target aarch64-linux-android --release
