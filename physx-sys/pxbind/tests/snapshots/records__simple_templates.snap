---
source: physx-sys/pxbind/tests/records.rs
expression: ro.structgen
---
// Automatically generated by pxbind
#include "PxPhysicsAPI.h"

using namespace physx;

#define unsafe_offsetof(st, m) ((size_t) ( (char *)&((st *)(0))->m - (char *)0 ))
#include "structgen.hpp"

int main() {
    PodStructGen sg;
    struct physx_PxVec3_Pod: public physx::PxVec3 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxVec3_Pod", "PxVec3");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3_Pod, z));
            sg.end_struct(sizeof(physx::PxVec3));
        }
    };
    physx_PxVec3_Pod::dump_layout(sg);

    struct physx_PxVec3Padded_Pod: public physx::PxVec3Padded {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxVec3Padded_Pod", "PxVec3Padded");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3Padded_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3Padded_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3Padded_Pod, z));
            sg.add_field("uint32_t padding", "padding", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxVec3Padded_Pod, padding));
            sg.end_struct(sizeof(physx::PxVec3Padded));
        }
    };
    physx_PxVec3Padded_Pod::dump_layout(sg);

    struct physx_PxVec4_Pod: public physx::PxVec4 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxVec4_Pod", "PxVec4");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, z));
            sg.add_field("float w", "w", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, w));
            sg.end_struct(sizeof(physx::PxVec4));
        }
    };
    physx_PxVec4_Pod::dump_layout(sg);

    struct physx_PxMat44_Pod: public physx::PxMat44 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxMat44_Pod", "PxMat44");
            sg.add_field("physx_PxVec4_Pod column0", "column0", "glam::Vec4", sizeof(physx::PxVec4), unsafe_offsetof(physx_PxMat44_Pod, column0));
            sg.add_field("physx_PxVec4_Pod column1", "column1", "glam::Vec4", sizeof(physx::PxVec4), unsafe_offsetof(physx_PxMat44_Pod, column1));
            sg.add_field("physx_PxVec4_Pod column2", "column2", "glam::Vec4", sizeof(physx::PxVec4), unsafe_offsetof(physx_PxMat44_Pod, column2));
            sg.add_field("physx_PxVec4_Pod column3", "column3", "glam::Vec4", sizeof(physx::PxVec4), unsafe_offsetof(physx_PxMat44_Pod, column3));
            sg.end_struct(sizeof(physx::PxMat44));
        }
    };
    physx_PxMat44_Pod::dump_layout(sg);

    struct physx_PxQuat_Pod: public physx::PxQuat {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxQuat_Pod", "PxQuat");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, z));
            sg.add_field("float w", "w", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, w));
            sg.end_struct(sizeof(physx::PxQuat));
        }
    };
    physx_PxQuat_Pod::dump_layout(sg);

    sg.finish();
}

