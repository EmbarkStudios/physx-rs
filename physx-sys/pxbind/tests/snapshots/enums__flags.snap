---
source: physx-sys/pxbind/tests/enums.rs
expression: "gen_enums(\"flags.h\").unwrap()"
---
/// enum for empty constructor tag
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum PxEMPTY {
    PxEmpty = 0,
}

/// enum for zero constructor tag for vectors and matrices
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum PxZERO {
    PxZero = 0,
}

/// enum for identity constructor flag for quaternions, transforms, and matrices
#[derive(Copy, Clone)]
#[repr(i32)]
pub enum PxIDENTITY {
    PxIdentity = 0,
}

/// Identifies each type of information for retrieving from actor.
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum PxActorCacheFlag {
    eACTOR_DATA = 1,
    eFORCE = 4,
    eTORQUE = 8,
}

bitflags::bitflags! {
    /// Flags for [`PxActorCacheFlag`]
    #[derive(Copy, Clone, Default)]
    #[repr(transparent)]
    pub struct PxActorCacheFlags: u16 {
        const eACTOR_DATA = 1 << 0;
        const eFORCE = 1 << 2;
        const eTORQUE = 1 << 3;
    }
}

/// These flags determine what data is read or written to the internal articulation data via cache.
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum PxArticulationCacheFlag {
    /// The joint velocities, see PxArticulationCache::jointVelocity.
    eVELOCITY = 1,
    /// The joint accelerations, see PxArticulationCache::jointAcceleration.
    eACCELERATION = 2,
    /// The joint positions, see PxArticulationCache::jointPosition.
    ePOSITION = 4,
    /// The joint forces, see PxArticulationCache::jointForce.
    eFORCE = 8,
    /// The link velocities, see PxArticulationCache::linkVelocity.
    eLINK_VELOCITY = 16,
    /// The link accelerations, see PxArticulationCache::linkAcceleration.
    eLINK_ACCELERATION = 32,
    /// Root link transform, see PxArticulationCache::rootLinkData.
    eROOT_TRANSFORM = 64,
    /// Root link velocities (read/write) and accelerations (read), see PxArticulationCache::rootLinkData.
    eROOT_VELOCITIES = 128,
    /// The spatial sensor forces, see PxArticulationCache::sensorForces.
    eSENSOR_FORCES = 256,
    /// Solver constraint joint forces, see PxArticulationCache::jointSolverForces.
    eJOINT_SOLVER_FORCES = 512,
    eALL = 247,
}

bitflags::bitflags! {
    /// Flags for [`PxArticulationCacheFlag`]
    #[derive(Copy, Clone, Default)]
    #[repr(transparent)]
    pub struct PxArticulationCacheFlags: u32 {
        const eVELOCITY = 1 << 0;
        const eACCELERATION = 1 << 1;
        const ePOSITION = 1 << 2;
        const eFORCE = 1 << 3;
        const eLINK_VELOCITY = 1 << 4;
        const eLINK_ACCELERATION = 1 << 5;
        const eROOT_TRANSFORM = 1 << 6;
        const eROOT_VELOCITIES = 1 << 7;
        const eSENSOR_FORCES = 1 << 8;
        const eJOINT_SOLVER_FORCES = 1 << 9;
        const eALL = Self::eVELOCITY.bits | Self::eACCELERATION.bits | Self::ePOSITION.bits | Self::eLINK_VELOCITY.bits | Self::eLINK_ACCELERATION.bits | Self::eROOT_TRANSFORM.bits | Self::eROOT_VELOCITIES.bits;
    }
}

/// Flags which affect the behavior of PxShapes.
#[derive(Copy, Clone)]
#[repr(u32)]
pub enum PxShapeFlag {
    /// The shape will partake in collision in the physical simulation.
    ///
    /// It is illegal to raise the eSIMULATION_SHAPE and eTRIGGER_SHAPE flags.
    /// In the event that one of these flags is already raised the sdk will reject any
    /// attempt to raise the other.  To raise the eSIMULATION_SHAPE first ensure that
    /// eTRIGGER_SHAPE is already lowered.
    ///
    /// This flag has no effect if simulation is disabled for the corresponding actor (see [`PxActorFlag::eDISABLE_SIMULATION`]).
    eSIMULATION_SHAPE = 1,
    /// The shape will partake in scene queries (ray casts, overlap tests, sweeps, ...).
    eSCENE_QUERY_SHAPE = 2,
    /// The shape is a trigger which can send reports whenever other shapes enter/leave its volume.
    ///
    /// Triangle meshes and heightfields can not be triggers. Shape creation will fail in these cases.
    ///
    /// Shapes marked as triggers do not collide with other objects. If an object should act both
    /// as a trigger shape and a collision shape then create a rigid body with two shapes, one being a
    /// trigger shape and the other a collision shape. 	It is illegal to raise the eTRIGGER_SHAPE and
    /// eSIMULATION_SHAPE flags on a single PxShape instance.  In the event that one of these flags is already
    /// raised the sdk will reject any attempt to raise the other.  To raise the eTRIGGER_SHAPE flag first
    /// ensure that eSIMULATION_SHAPE flag is already lowered.
    ///
    /// Trigger shapes will no longer send notification events for interactions with other trigger shapes.
    ///
    /// Shapes marked as triggers are allowed to participate in scene queries, provided the eSCENE_QUERY_SHAPE flag is set.
    ///
    /// This flag has no effect if simulation is disabled for the corresponding actor (see [`PxActorFlag::eDISABLE_SIMULATION`]).
    eTRIGGER_SHAPE = 4,
    /// Enable debug renderer for this shape
    eVISUALIZATION = 8,
}

bitflags::bitflags! {
    /// Flags for [`PxShapeFlag`]
    #[derive(Copy, Clone, Default)]
    #[repr(transparent)]
    pub struct PxShapeFlags: u8 {
        const eSIMULATION_SHAPE = 1 << 0;
        const eSCENE_QUERY_SHAPE = 1 << 1;
        const eTRIGGER_SHAPE = 1 << 2;
        const eVISUALIZATION = 1 << 3;
    }
}

