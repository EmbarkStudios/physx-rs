---
source: physx-sys/pxbind/tests/structgen.rs
expression: sg
---
// Automatically generated by pxbind
#include "PxPhysicsAPI.h"

using namespace physx;

#define unsafe_offsetof(st, m) ((size_t) ( (char *)&((st *)(0))->m - (char *)0 ))
#include "structgen.hpp"

int main() {
    PodStructGen sg;
    sg.pass_thru("struct physx_PxAllocatorCallback_Pod;\n");
    sg.pass_thru("struct physx_PxErrorCallback_Pod;\n");
    sg.pass_thru("struct physx_PxAssertHandler_Pod;\n");
    sg.pass_thru("struct physx_PxInputStream_Pod;\n");
    sg.pass_thru("struct physx_PxInputData_Pod;\n");
    sg.pass_thru("struct physx_PxOutputStream_Pod;\n");
    sg.pass_thru("struct physx_PxVec2_Pod;\n");
    sg.pass_thru("struct physx_PxVec3_Pod;\n");
    sg.pass_thru("struct physx_PxVec4_Pod;\n");
    sg.pass_thru("struct physx_PxQuat_Pod;\n");
    sg.pass_thru("struct physx_PxMat33_Pod;\n");
    sg.pass_thru("struct physx_PxMat34_Pod;\n");
    sg.pass_thru("struct physx_PxMat44_Pod;\n");
    sg.pass_thru("struct physx_PxTransform_Pod;\n");
    sg.pass_thru("struct physx_PxPlane_Pod;\n");
    sg.pass_thru("struct physx_PxBounds3_Pod;\n");
    sg.pass_thru("struct physx_PxBase_Pod;\n");
    sg.pass_thru("struct physx_PxSerializationContext_Pod;\n");
    sg.pass_thru("struct physx_PxRepXSerializer_Pod;\n");
    sg.pass_thru("struct physx_PxSerializer_Pod;\n");
    sg.pass_thru("struct physx_PxPhysics_Pod;\n");
    sg.pass_thru("struct physx_PxCollection_Pod;\n");
    sg.pass_thru("struct physx_PxProcessPxBaseCallback_Pod {\n    void* vtable_;\n};\n");
    sg.pass_thru("struct physx_PxSerializationContext_Pod {\n    void* vtable_;\n};\n");
    struct physx_PxDeserializationContext_Pod: public physx::PxDeserializationContext {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxDeserializationContext_Pod", "PxDeserializationContext");
            sg.end_struct(sizeof(physx::PxDeserializationContext));
        }
    };
    physx_PxDeserializationContext_Pod::dump_layout(sg);

    sg.pass_thru("struct physx_PxSerializationRegistry_Pod {\n    void* vtable_;\n};\n");
    sg.pass_thru("struct physx_PxCollection_Pod {\n    void* vtable_;\n};\n");
    sg.pass_thru("struct physx_PxTypeInfo_Pod;\n");
    sg.pass_thru("struct physx_PxMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxFEMSoftBodyMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxFEMClothMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxPBDMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxFLIPMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxMPMMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxCustomMaterial_Pod;\n");
    sg.pass_thru("struct physx_PxConvexMesh_Pod;\n");
    sg.pass_thru("struct physx_PxTriangleMesh_Pod;\n");
    sg.pass_thru("struct physx_PxBVH33TriangleMesh_Pod;\n");
    sg.pass_thru("struct physx_PxBVH34TriangleMesh_Pod;\n");
    sg.pass_thru("struct physx_PxTetrahedronMesh_Pod;\n");
    sg.pass_thru("struct physx_PxHeightField_Pod;\n");
    sg.pass_thru("struct physx_PxActor_Pod;\n");
    sg.pass_thru("struct physx_PxRigidActor_Pod;\n");
    sg.pass_thru("struct physx_PxRigidBody_Pod;\n");
    sg.pass_thru("struct physx_PxRigidDynamic_Pod;\n");
    sg.pass_thru("struct physx_PxRigidStatic_Pod;\n");
    sg.pass_thru("struct physx_PxArticulationLink_Pod;\n");
    sg.pass_thru("struct physx_PxArticulationJointReducedCoordinate_Pod;\n");
    sg.pass_thru("struct physx_PxArticulationReducedCoordinate_Pod;\n");
    sg.pass_thru("struct physx_PxAggregate_Pod;\n");
    sg.pass_thru("struct physx_PxConstraint_Pod;\n");
    sg.pass_thru("struct physx_PxShape_Pod;\n");
    sg.pass_thru("struct physx_PxPruningStructure_Pod;\n");
    sg.pass_thru("struct physx_PxParticleSystem_Pod;\n");
    sg.pass_thru("struct physx_PxPBDParticleSystem_Pod;\n");
    sg.pass_thru("struct physx_PxFLIPParticleSystem_Pod;\n");
    sg.pass_thru("struct physx_PxMPMParticleSystem_Pod;\n");
    sg.pass_thru("struct physx_PxCustomParticleSystem_Pod;\n");
    sg.pass_thru("struct physx_PxSoftBody_Pod;\n");
    sg.pass_thru("struct physx_PxFEMCloth_Pod;\n");
    sg.pass_thru("struct physx_PxHairSystem_Pod;\n");
    sg.pass_thru("struct physx_PxParticleBuffer_Pod;\n");
    sg.pass_thru("struct physx_PxParticleAndDiffuseBuffer_Pod;\n");
    sg.pass_thru("struct physx_PxParticleClothBuffer_Pod;\n");
    sg.pass_thru("struct physx_PxParticleRigidBuffer_Pod;\n");
    sg.pass_thru("struct physx_PxAssertHandler_Pod {\n    void* vtable_;\n};\n");
    struct physx_PxBase_Pod: public physx::PxBase {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxBase_Pod", "PxBase");
            sg.end_struct(sizeof(physx::PxBase));
        }
    };
    physx_PxBase_Pod::dump_layout(sg);

    struct physx_PxRefCounted_Pod: public physx::PxRefCounted {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxRefCounted_Pod", "PxRefCounted");
            sg.end_struct(sizeof(physx::PxRefCounted));
        }
    };
    physx_PxRefCounted_Pod::dump_layout(sg);

    struct physx_PxGeometry_Pod: public physx::PxGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxGeometry_Pod", "PxGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxGeometry_Pod, mTypePadding));
            sg.end_struct(sizeof(physx::PxGeometry));
        }
    };
    physx_PxGeometry_Pod::dump_layout(sg);

    struct physx_PxVec3_Pod: public physx::PxVec3 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxVec3_Pod", "PxVec3");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3_Pod, z));
            sg.end_struct(sizeof(physx::PxVec3));
        }
    };
    physx_PxVec3_Pod::dump_layout(sg);

    struct physx_PxVec3Padded_Pod: public physx::PxVec3Padded {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxVec3Padded_Pod", "PxVec3Padded");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3Padded_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3Padded_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxVec3Padded_Pod, z));
            sg.add_field("uint32_t padding", "padding", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxVec3Padded_Pod, padding));
            sg.end_struct(sizeof(physx::PxVec3Padded));
        }
    };
    physx_PxVec3Padded_Pod::dump_layout(sg);

    struct physx_PxQuat_Pod: public physx::PxQuat {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxQuat_Pod", "PxQuat");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, z));
            sg.add_field("float w", "w", "f32", sizeof(float), unsafe_offsetof(physx_PxQuat_Pod, w));
            sg.end_struct(sizeof(physx::PxQuat));
        }
    };
    physx_PxQuat_Pod::dump_layout(sg);

    struct physx_PxTransform_Pod: public physx::PxTransform {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxTransform_Pod", "PxTransform");
            sg.add_field("physx_PxQuat_Pod q", "q", "PxQuat", sizeof(physx::PxQuat), unsafe_offsetof(physx_PxTransform_Pod, q));
            sg.add_field("physx_PxVec3_Pod p", "p", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxTransform_Pod, p));
            sg.end_struct(sizeof(physx::PxTransform));
        }
    };
    physx_PxTransform_Pod::dump_layout(sg);

    struct physx_PxTransformPadded_Pod: public physx::PxTransformPadded {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxTransformPadded_Pod", "PxTransformPadded");
            sg.add_field("physx_PxTransform_Pod transform", "transform", "PxTransform", sizeof(physx::PxTransform), unsafe_offsetof(physx_PxTransformPadded_Pod, transform));
            sg.add_field("uint32_t padding", "padding", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxTransformPadded_Pod, padding));
            sg.end_struct(sizeof(physx::PxTransformPadded));
        }
    };
    physx_PxTransformPadded_Pod::dump_layout(sg);

    struct physx_PxPlane_Pod: public physx::PxPlane {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxPlane_Pod", "PxPlane");
            sg.add_field("physx_PxVec3_Pod n", "n", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxPlane_Pod, n));
            sg.add_field("float d", "d", "f32", sizeof(float), unsafe_offsetof(physx_PxPlane_Pod, d));
            sg.end_struct(sizeof(physx::PxPlane));
        }
    };
    physx_PxPlane_Pod::dump_layout(sg);

    struct physx_PxBoxGeometry_Pod: public physx::PxBoxGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxBoxGeometry_Pod", "PxBoxGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxBoxGeometry_Pod, mTypePadding));
            sg.add_field("physx_PxVec3_Pod halfExtents", "halfExtents", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxBoxGeometry_Pod, halfExtents));
            sg.end_struct(sizeof(physx::PxBoxGeometry));
        }
    };
    physx_PxBoxGeometry_Pod::dump_layout(sg);

    struct physx_PxSphereGeometry_Pod: public physx::PxSphereGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxSphereGeometry_Pod", "PxSphereGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxSphereGeometry_Pod, mTypePadding));
            sg.add_field("float radius", "radius", "f32", sizeof(float), unsafe_offsetof(physx_PxSphereGeometry_Pod, radius));
            sg.end_struct(sizeof(physx::PxSphereGeometry));
        }
    };
    physx_PxSphereGeometry_Pod::dump_layout(sg);

    struct physx_PxCapsuleGeometry_Pod: public physx::PxCapsuleGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxCapsuleGeometry_Pod", "PxCapsuleGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxCapsuleGeometry_Pod, mTypePadding));
            sg.add_field("float radius", "radius", "f32", sizeof(float), unsafe_offsetof(physx_PxCapsuleGeometry_Pod, radius));
            sg.add_field("float halfHeight", "halfHeight", "f32", sizeof(float), unsafe_offsetof(physx_PxCapsuleGeometry_Pod, halfHeight));
            sg.end_struct(sizeof(physx::PxCapsuleGeometry));
        }
    };
    physx_PxCapsuleGeometry_Pod::dump_layout(sg);

    struct physx_PxPlaneGeometry_Pod: public physx::PxPlaneGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxPlaneGeometry_Pod", "PxPlaneGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxPlaneGeometry_Pod, mTypePadding));
            sg.end_struct(sizeof(physx::PxPlaneGeometry));
        }
    };
    physx_PxPlaneGeometry_Pod::dump_layout(sg);

    struct physx_PxMat33_Pod: public physx::PxMat33 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxMat33_Pod", "PxMat33");
            sg.add_field("physx_PxVec3_Pod column0", "column0", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxMat33_Pod, column0));
            sg.add_field("physx_PxVec3_Pod column1", "column1", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxMat33_Pod, column1));
            sg.add_field("physx_PxVec3_Pod column2", "column2", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxMat33_Pod, column2));
            sg.end_struct(sizeof(physx::PxMat33));
        }
    };
    physx_PxMat33_Pod::dump_layout(sg);

    struct physx_PxMeshScale_Pod: public physx::PxMeshScale {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxMeshScale_Pod", "PxMeshScale");
            sg.add_field("physx_PxVec3_Pod scale", "scale", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxMeshScale_Pod, scale));
            sg.add_field("physx_PxQuat_Pod rotation", "rotation", "PxQuat", sizeof(physx::PxQuat), unsafe_offsetof(physx_PxMeshScale_Pod, rotation));
            sg.end_struct(sizeof(physx::PxMeshScale));
        }
    };
    physx_PxMeshScale_Pod::dump_layout(sg);

    struct physx_PxStridedData_Pod: public physx::PxStridedData {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxStridedData_Pod", "PxStridedData");
            sg.add_field("uint32_t stride", "stride", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxStridedData_Pod, stride));
            sg.add_field("void const* data", "data", "*const std::ffi::c_void", sizeof(void const*), unsafe_offsetof(physx_PxStridedData_Pod, data));
            sg.end_struct(sizeof(physx::PxStridedData));
        }
    };
    physx_PxStridedData_Pod::dump_layout(sg);

    struct physx_PxBoundedData_Pod: public physx::PxBoundedData {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxBoundedData_Pod", "PxBoundedData");
            sg.add_field("uint32_t stride", "stride", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxBoundedData_Pod, stride));
            sg.add_field("void const* data", "data", "*const std::ffi::c_void", sizeof(void const*), unsafe_offsetof(physx_PxBoundedData_Pod, data));
            sg.add_field("uint32_t count", "count", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxBoundedData_Pod, count));
            sg.end_struct(sizeof(physx::PxBoundedData));
        }
    };
    physx_PxBoundedData_Pod::dump_layout(sg);

    struct physx_PxHullPolygon_Pod: public physx::PxHullPolygon {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxHullPolygon_Pod", "PxHullPolygon");
            sg.add_field("float mPlane[4]", "mPlane", "[f32; 4]", sizeof(float[4]), unsafe_offsetof(physx_PxHullPolygon_Pod, mPlane));
            sg.add_field("uint16_t mNbVerts", "mNbVerts", "u16", sizeof(uint16_t), unsafe_offsetof(physx_PxHullPolygon_Pod, mNbVerts));
            sg.add_field("uint16_t mIndexBase", "mIndexBase", "u16", sizeof(uint16_t), unsafe_offsetof(physx_PxHullPolygon_Pod, mIndexBase));
            sg.end_struct(sizeof(physx::PxHullPolygon));
        }
    };
    physx_PxHullPolygon_Pod::dump_layout(sg);

    struct physx_PxConvexMesh_Pod: public physx::PxConvexMesh {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxConvexMesh_Pod", "PxConvexMesh");
            sg.end_struct(sizeof(physx::PxConvexMesh));
        }
    };
    physx_PxConvexMesh_Pod::dump_layout(sg);

    struct physx_PxConvexMeshGeometry_Pod: public physx::PxConvexMeshGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxConvexMeshGeometry_Pod", "PxConvexMeshGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxConvexMeshGeometry_Pod, mTypePadding));
            sg.add_field("physx_PxMeshScale_Pod scale", "scale", "PxMeshScale", sizeof(physx::PxMeshScale), unsafe_offsetof(physx_PxConvexMeshGeometry_Pod, scale));
            sg.add_field("physx_PxConvexMesh_Pod* convexMesh", "convexMesh", "*mut PxConvexMesh", sizeof(physx::PxConvexMesh*), unsafe_offsetof(physx_PxConvexMeshGeometry_Pod, convexMesh));
            sg.add_field("uint8_t meshFlags", "meshFlags", "PxConvexMeshGeometryFlags", sizeof(physx::PxConvexMeshGeometryFlags), unsafe_offsetof(physx_PxConvexMeshGeometry_Pod, meshFlags));
            sg.end_struct(sizeof(physx::PxConvexMeshGeometry));
        }
    };
    physx_PxConvexMeshGeometry_Pod::dump_layout(sg);

    struct physx_PxTriangleMeshGeometry_Pod: public physx::PxTriangleMeshGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxTriangleMeshGeometry_Pod", "PxTriangleMeshGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxTriangleMeshGeometry_Pod, mTypePadding));
            sg.add_field("physx_PxMeshScale_Pod scale", "scale", "PxMeshScale", sizeof(physx::PxMeshScale), unsafe_offsetof(physx_PxTriangleMeshGeometry_Pod, scale));
            sg.add_field("uint8_t meshFlags", "meshFlags", "PxMeshGeometryFlags", sizeof(physx::PxMeshGeometryFlags), unsafe_offsetof(physx_PxTriangleMeshGeometry_Pod, meshFlags));
            sg.add_field("physx_PxTriangleMesh_Pod* triangleMesh", "triangleMesh", "*mut PxTriangleMesh", sizeof(physx::PxTriangleMesh*), unsafe_offsetof(physx_PxTriangleMeshGeometry_Pod, triangleMesh));
            sg.end_struct(sizeof(physx::PxTriangleMeshGeometry));
        }
    };
    physx_PxTriangleMeshGeometry_Pod::dump_layout(sg);

    struct physx_PxHeightFieldGeometry_Pod: public physx::PxHeightFieldGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxHeightFieldGeometry_Pod", "PxHeightFieldGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxHeightFieldGeometry_Pod, mTypePadding));
            sg.add_field("physx_PxHeightField_Pod* heightField", "heightField", "*mut PxHeightField", sizeof(physx::PxHeightField*), unsafe_offsetof(physx_PxHeightFieldGeometry_Pod, heightField));
            sg.add_field("float heightScale", "heightScale", "f32", sizeof(float), unsafe_offsetof(physx_PxHeightFieldGeometry_Pod, heightScale));
            sg.add_field("float rowScale", "rowScale", "f32", sizeof(float), unsafe_offsetof(physx_PxHeightFieldGeometry_Pod, rowScale));
            sg.add_field("float columnScale", "columnScale", "f32", sizeof(float), unsafe_offsetof(physx_PxHeightFieldGeometry_Pod, columnScale));
            sg.add_field("uint8_t heightFieldFlags", "heightFieldFlags", "PxMeshGeometryFlags", sizeof(physx::PxMeshGeometryFlags), unsafe_offsetof(physx_PxHeightFieldGeometry_Pod, heightFieldFlags));
            sg.end_struct(sizeof(physx::PxHeightFieldGeometry));
        }
    };
    physx_PxHeightFieldGeometry_Pod::dump_layout(sg);

    struct physx_PxBounds3_Pod: public physx::PxBounds3 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxBounds3_Pod", "PxBounds3");
            sg.add_field("physx_PxVec3_Pod minimum", "minimum", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxBounds3_Pod, minimum));
            sg.add_field("physx_PxVec3_Pod maximum", "maximum", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxBounds3_Pod, maximum));
            sg.end_struct(sizeof(physx::PxBounds3));
        }
    };
    physx_PxBounds3_Pod::dump_layout(sg);

    struct physx_PxVec4_Pod: public physx::PxVec4 {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxVec4_Pod", "PxVec4");
            sg.add_field("float x", "x", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, x));
            sg.add_field("float y", "y", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, y));
            sg.add_field("float z", "z", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, z));
            sg.add_field("float w", "w", "f32", sizeof(float), unsafe_offsetof(physx_PxVec4_Pod, w));
            sg.end_struct(sizeof(physx::PxVec4));
        }
    };
    physx_PxVec4_Pod::dump_layout(sg);

    struct physx_PxParticleSystemGeometry_Pod: public physx::PxParticleSystemGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxParticleSystemGeometry_Pod", "PxParticleSystemGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxParticleSystemGeometry_Pod, mTypePadding));
            sg.add_field("int32_t mSolverType", "mSolverType", "PxParticleSolverType", sizeof(physx::PxParticleSolverType::Enum), unsafe_offsetof(physx_PxParticleSystemGeometry_Pod, mSolverType));
            sg.end_struct(sizeof(physx::PxParticleSystemGeometry));
        }
    };
    physx_PxParticleSystemGeometry_Pod::dump_layout(sg);

    struct physx_PxHairSystemGeometry_Pod: public physx::PxHairSystemGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxHairSystemGeometry_Pod", "PxHairSystemGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxHairSystemGeometry_Pod, mTypePadding));
            sg.end_struct(sizeof(physx::PxHairSystemGeometry));
        }
    };
    physx_PxHairSystemGeometry_Pod::dump_layout(sg);

    struct physx_PxTetrahedronMeshGeometry_Pod: public physx::PxTetrahedronMeshGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxTetrahedronMeshGeometry_Pod", "PxTetrahedronMeshGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxTetrahedronMeshGeometry_Pod, mTypePadding));
            sg.add_field("physx_PxTetrahedronMesh_Pod* tetrahedronMesh", "tetrahedronMesh", "*mut PxTetrahedronMesh", sizeof(physx::PxTetrahedronMesh*), unsafe_offsetof(physx_PxTetrahedronMeshGeometry_Pod, tetrahedronMesh));
            sg.end_struct(sizeof(physx::PxTetrahedronMeshGeometry));
        }
    };
    physx_PxTetrahedronMeshGeometry_Pod::dump_layout(sg);

    struct physx_PxQueryHit_Pod: public physx::PxQueryHit {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxQueryHit_Pod", "PxQueryHit");
            sg.add_field("uint32_t faceIndex", "faceIndex", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxQueryHit_Pod, faceIndex));
            sg.end_struct(sizeof(physx::PxQueryHit));
        }
    };
    physx_PxQueryHit_Pod::dump_layout(sg);

    struct physx_PxLocationHit_Pod: public physx::PxLocationHit {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxLocationHit_Pod", "PxLocationHit");
            sg.add_field("uint32_t faceIndex", "faceIndex", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxLocationHit_Pod, faceIndex));
            sg.add_field("uint16_t flags", "flags", "PxHitFlags", sizeof(physx::PxHitFlags), unsafe_offsetof(physx_PxLocationHit_Pod, flags));
            sg.add_field("physx_PxVec3_Pod position", "position", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxLocationHit_Pod, position));
            sg.add_field("physx_PxVec3_Pod normal", "normal", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxLocationHit_Pod, normal));
            sg.add_field("float distance", "distance", "f32", sizeof(float), unsafe_offsetof(physx_PxLocationHit_Pod, distance));
            sg.end_struct(sizeof(physx::PxLocationHit));
        }
    };
    physx_PxLocationHit_Pod::dump_layout(sg);

    struct physx_PxGeomRaycastHit_Pod: public physx::PxGeomRaycastHit {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxGeomRaycastHit_Pod", "PxGeomRaycastHit");
            sg.add_field("uint32_t faceIndex", "faceIndex", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, faceIndex));
            sg.add_field("uint16_t flags", "flags", "PxHitFlags", sizeof(physx::PxHitFlags), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, flags));
            sg.add_field("physx_PxVec3_Pod position", "position", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, position));
            sg.add_field("physx_PxVec3_Pod normal", "normal", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, normal));
            sg.add_field("float distance", "distance", "f32", sizeof(float), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, distance));
            sg.add_field("float u", "u", "f32", sizeof(float), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, u));
            sg.add_field("float v", "v", "f32", sizeof(float), unsafe_offsetof(physx_PxGeomRaycastHit_Pod, v));
            sg.end_struct(sizeof(physx::PxGeomRaycastHit));
        }
    };
    physx_PxGeomRaycastHit_Pod::dump_layout(sg);

    struct physx_PxGeomOverlapHit_Pod: public physx::PxGeomOverlapHit {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxGeomOverlapHit_Pod", "PxGeomOverlapHit");
            sg.add_field("uint32_t faceIndex", "faceIndex", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxGeomOverlapHit_Pod, faceIndex));
            sg.end_struct(sizeof(physx::PxGeomOverlapHit));
        }
    };
    physx_PxGeomOverlapHit_Pod::dump_layout(sg);

    struct physx_PxGeomSweepHit_Pod: public physx::PxGeomSweepHit {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxGeomSweepHit_Pod", "PxGeomSweepHit");
            sg.add_field("uint32_t faceIndex", "faceIndex", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxGeomSweepHit_Pod, faceIndex));
            sg.add_field("uint16_t flags", "flags", "PxHitFlags", sizeof(physx::PxHitFlags), unsafe_offsetof(physx_PxGeomSweepHit_Pod, flags));
            sg.add_field("physx_PxVec3_Pod position", "position", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxGeomSweepHit_Pod, position));
            sg.add_field("physx_PxVec3_Pod normal", "normal", "PxVec3", sizeof(physx::PxVec3), unsafe_offsetof(physx_PxGeomSweepHit_Pod, normal));
            sg.add_field("float distance", "distance", "f32", sizeof(float), unsafe_offsetof(physx_PxGeomSweepHit_Pod, distance));
            sg.end_struct(sizeof(physx::PxGeomSweepHit));
        }
    };
    physx_PxGeomSweepHit_Pod::dump_layout(sg);

    struct physx_PxGeomIndexPair_Pod: public physx::PxGeomIndexPair {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxGeomIndexPair_Pod", "PxGeomIndexPair");
            sg.add_field("uint32_t id0", "id0", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxGeomIndexPair_Pod, id0));
            sg.add_field("uint32_t id1", "id1", "u32", sizeof(uint32_t), unsafe_offsetof(physx_PxGeomIndexPair_Pod, id1));
            sg.end_struct(sizeof(physx::PxGeomIndexPair));
        }
    };
    physx_PxGeomIndexPair_Pod::dump_layout(sg);

    struct physx_PxQueryThreadContext_Pod: public physx::PxQueryThreadContext {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxQueryThreadContext_Pod", "PxQueryThreadContext");
            sg.end_struct(sizeof(physx::PxQueryThreadContext));
        }
    };
    physx_PxQueryThreadContext_Pod::dump_layout(sg);

    sg.pass_thru("struct physx_PxContactBuffer_Pod;\n");
    sg.pass_thru("struct physx_PxRenderOutput_Pod;\n");
    sg.pass_thru("struct physx_PxMassProperties_Pod;\n");
    struct physx_PxCustomGeometryType_Pod: public physx::PxCustomGeometryType {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxCustomGeometryType_Pod", "PxCustomGeometryType");
            sg.end_struct(sizeof(physx::PxCustomGeometryType));
        }
    };
    physx_PxCustomGeometryType_Pod::dump_layout(sg);

    sg.pass_thru("struct physx_PxCustomGeometryCallbacks_Pod {\n    void* vtable_;\n};\n");
    struct physx_PxCustomGeometry_Pod: public physx::PxCustomGeometry {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxCustomGeometry_Pod", "PxCustomGeometry");
            sg.add_field("float mTypePadding", "mTypePadding", "f32", sizeof(float), unsafe_offsetof(physx_PxCustomGeometry_Pod, mTypePadding));
            sg.add_field("physx_PxCustomGeometryCallbacks_Pod* callbacks", "callbacks", "*mut PxCustomGeometryCallbacks", sizeof(physx::PxCustomGeometryCallbacks*), unsafe_offsetof(physx_PxCustomGeometry_Pod, callbacks));
            sg.end_struct(sizeof(physx::PxCustomGeometry));
        }
    };
    physx_PxCustomGeometry_Pod::dump_layout(sg);

    struct physx_PxGeometryHolder_Pod: public physx::PxGeometryHolder {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxGeometryHolder_Pod", "PxGeometryHolder");
            sg.end_struct(sizeof(physx::PxGeometryHolder));
        }
    };
    physx_PxGeometryHolder_Pod::dump_layout(sg);

    sg.pass_thru("struct physx_PxFilterData_Pod;\n");
    sg.pass_thru("struct physx_PxBaseMaterial_Pod;\n");
    struct physx_PxShape_Pod: public physx::PxShape {
        static void dump_layout(PodStructGen& sg) {
            sg.begin_struct("physx_PxShape_Pod", "PxShape");
            sg.add_field("void* userData", "userData", "UserData", sizeof(void*), unsafe_offsetof(physx_PxShape_Pod, userData));
            sg.end_struct(sizeof(physx::PxShape));
        }
    };
    physx_PxShape_Pod::dump_layout(sg);

    sg.finish();
}

